import composeBackends from './backends/compose'
import consoleBackend from './backends/console'
import createMemoryBackend from './backends/create-memory'
import LEVELS from './levels'

// ===================================================================

// Store all logs in memory until a real backend is connected.
export let backend = composeBackends(
  consoleBackend,
  createMemoryBackend()
)

export const setBackend = newBackend => {
  backend = newBackend
}

// -------------------------------------------------------------------

const bind = (fn, thisArgs) => function () {
  return fn.apply(thisArgs, arguments)
}

function Logger (namespace) {
  this._namespace = namespace

  // bind all logging methods
  for (const name in LEVELS) {
    const lowerCase = name.toLowerCase()
    this[lowerCase] = bind(this[lowerCase], this)
  }
}

const { prototype } = Logger

prototype.wrap = function (message, fn) {
  const logger = this
  return function () {
    try {
      const result = fn.apply(this, arguments)
      const then = result && result.then
      return typeof then === 'function'
        ? then.call(result, error => {
          logger.warn(message, { error })
          throw error
        })
        : result
    } catch (error) {
      logger.warn(message, { error })
    }
  }
}

for (const name in LEVELS) {
  const level = LEVELS[name]

  prototype[name.toLowerCase()] = function (message, data) {
    backend({
      data,
      level,
      namespace: this._namespace,
      message,
      time: Date.now(),
    })
  }
}

const createLogger = namespace => new Logger(namespace)
export { createLogger as default }
